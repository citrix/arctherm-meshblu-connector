// Generated by CoffeeScript 1.12.7
(function() {
  var ArcInstaTempManager, Connector, EventEmitter, debug,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  EventEmitter = require('events').EventEmitter;

  debug = require('debug')('meshblu-connector-arc-instatemp:index');

  ArcInstaTempManager = require('./arc-instatemp-md-manager');

  Connector = (function(superClass) {
    extend(Connector, superClass);

    function Connector() {
      this.start = bind(this.start, this);
      this._onData = bind(this._onData, this);
      this.onConfig = bind(this.onConfig, this);
      this.close = bind(this.close, this);
      this.isOnline = bind(this.isOnline, this);
      this.arcTemperature = new ArcInstaTempManager;
      this.arcTemperature.on('data', this._onData);
    }

    Connector.prototype.isOnline = function(callback) {
      return callback(null, {
        running: true
      });
    };

    Connector.prototype.close = function(callback) {
      debug('on close');
      return this.arcTemperature.close(callback);
    };

    Connector.prototype.onConfig = function(device, callback) {
      var autoDiscover, ref;
      if (device == null) {
        device = {};
      }
      if (callback == null) {
        callback = function() {};
      }
      this.options = device.options;
      debug('on config', this.options);
      autoDiscover = ((ref = this.options) != null ? ref : {}).autoDiscover;
      return this.arcTemperature.connect({
        autoDiscover: autoDiscover
      }, callback);
    };

    Connector.prototype._onData = function(data) {
      if (data) {
        return this.emit('message', {
          devices: ['*'],
          data: data
        });
      }
    };

    Connector.prototype.start = function(device, callback) {
      debug('started');
      return this.onConfig(device, callback);
    };

    return Connector;

  })(EventEmitter);

  module.exports = Connector;

}).call(this);
