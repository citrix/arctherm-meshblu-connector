// Generated by CoffeeScript 1.12.7
(function() {
  var ArcInstaTempManager, EventEmitter, ON_STATE, _, _DEVICE_NAME, _FOUND_TEMP, debug, error, noble,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  _ = require('lodash');

  EventEmitter = require('events').EventEmitter;

  debug = require('debug')('meshblu-connector-arc-instatemp:arc-instatemp-md-manager');

  if (process.env.SKIP_REQUIRE_NOBLE === 'true') {
    noble = new EventEmitter;
  } else {
    try {
      noble = require('noble');
    } catch (error1) {
      error = error1;
      console.error(error);
    }
  }

  ON_STATE = 'poweredOn';

  _DEVICE_NAME = '';

  _FOUND_TEMP = false;

  ArcInstaTempManager = (function(superClass) {
    extend(ArcInstaTempManager, superClass);

    function ArcInstaTempManager() {
      this._c2f = bind(this._c2f, this);
      this._stopScanning = bind(this._stopScanning, this);
      this._startScanning = bind(this._startScanning, this);
      this._onStateChange = bind(this._onStateChange, this);
      this._onDiscover = bind(this._onDiscover, this);
      this._onDisconnect = bind(this._onDisconnect, this);
      this._onData = bind(this._onData, this);
      this._disconnect = bind(this._disconnect, this);
      this.connect = bind(this.connect, this);
      this.close = bind(this.close, this);
      this.noble = noble;
      this.state = this.noble.state;
      this.noble.on('discover', this._onDiscover);
      this.noble.on('stateChange', this._onStateChange);
      setInterval(function() {
        if (_FOUND_TEMP) {
          _DEVICE_NAME = '';
          return _FOUND_TEMP = false;
        }
      }, 20000);
    }

    ArcInstaTempManager.prototype.close = function(callback) {
      if (callback == null) {
        callback = function() {};
      }
      this._stopScanning();
      this._disconnect();
      return callback();
    };

    ArcInstaTempManager.prototype.connect = function(arg, callback) {
	  console.log("in connect");
      this.autoDiscover = arg.autoDiscover;
      this._emit = _.throttle(this.emit, 500, {
        leading: true,
        trailing: false
      });
      this._startScanning();
      return callback();
    };

    ArcInstaTempManager.prototype._disconnect = function(callback) {
      if (callback == null) {
        callback = function() {};
      }
      return callback();
    };

    ArcInstaTempManager.prototype._onData = function(rawData) {
		console.log("got dadta")
      return this._emit('data', {
        temperature: rawData
      });
    };

    ArcInstaTempManager.prototype._onDisconnect = function() {
      return this._disconnect((function(_this) {
        return function() {
          return _this._startScanning();
        };
      })(this));
    };

    ArcInstaTempManager.prototype._onDiscover = function(peripheral) {
      var foundTemp, matches, regExPattern, suffixTemp, temp;
      debug('discovered', peripheral.advertisement.localName);
      temp = peripheral.advertisement.localName;
      regExPattern = /ARC\:0057 ([0-9]+\.[0-9])(C|F)/;
      matches = regExPattern.exec(temp);
      if (matches) {
        foundTemp = matches[1];
        suffixTemp = matches[2];
        if (temp !== _DEVICE_NAME) {
          _DEVICE_NAME = temp;
          _FOUND_TEMP = true;
          foundTemp = this._c2f(foundTemp);
          debug('temperature: ', foundTemp + suffixTemp);
          return this._onData(foundTemp + suffixTemp);
        }
      }
    };

    ArcInstaTempManager.prototype._onStateChange = function(state) {
      this.state = state;
      return this._startScanning();
    };

    ArcInstaTempManager.prototype._startScanning = function() {
      if (this.state !== ON_STATE) {
        return;
      }
      return this._disconnect((function(_this) {
        return function() {
          return _this.noble.startScanning([], true);
        };
      })(this));
    };

    ArcInstaTempManager.prototype._stopScanning = function() {
      return this.noble.stopScanning();
    };

    ArcInstaTempManager.prototype._c2f = function(data) {
      var cel;
      cel = parseFloat(data);
      return cel;
    };

    return ArcInstaTempManager;

  })(EventEmitter);

  module.exports = ArcInstaTempManager;

}).call(this);
